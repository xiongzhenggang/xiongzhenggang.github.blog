代码如下;
BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(packageFilePath))); 
当使用此Reader读取GBK编码的文件时，所有的中文都会乱码，因为Reader会将读取到的byte转换成char，如果没有指定转换编码，那么Android默认是使用的utf8，那么读取到的内容就会错误。 
那么假如读取完毕后进行一次转码是否可以解决乱码问题呢？ 
比如： 
Java代码 
String s = readline();  
s = new String(s.getBytes("gbk"), "gbk");  
思路是获得字符串的gbk编码，按照gbk编码重新解析一遍，实验证明是不可以的，是什么原因呢？ 

举例说明： 
Java代码  
byte ge[] = {(byte)0xb8, (byte)0xf6};  

这是汉字‘个’的gbk编码。 
String s = new String(ge, "gbk"); 
此时s不会是乱码。 
Java代码  收藏代码
s.getBytes("utf8") //得到-28，-72，-86。‘个’的utf8编码  
s.getBytes("gbk") //得到0xb8,0xf6。‘个’的gbk编码  

而如果用一下代码生成s： 
Java代码  收藏代码
String s = new String(ge, "utf8");  

此时s已经是乱码。 
Java代码  收藏代码
s.getBytes("utf8") //得到-17,-65,-67,-17,-65,-67  
得到的数据也是乱的，无法逆向出真正的内容来。 

所以要解决这个问题只能是让reader将byte转向char时使用正确的编码，即生成Reader时指定编码，即： 
Java代码  收藏代码
BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(packageFilePath), "gbk"));  